#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;
using ll = long long;

const int N=1e5+1, NN=1e9+1;
int n, m, used[N], k;

vector<int>g[N], kol;

void dfs(int v) {
    used[v] = 1;
    k++;    
    for (int u : g[v]) {
        if (!used[u]) {
            dfs(u);
        }
    }
}   

long bpow(int a, int b) {
    if (!b) return 1;
    if (b & 1) return a*bpow(a, b - 1);
    return bpow(a * a, b >> 1);
}

int main() {
    cin >> n>>m;
    for (int i = 0; i < n-1; ++i) {
        int x, y, z;
        cin >> x >> y >> z;
       if(z==0) g[x].push_back(y), g[y].push_back(x);
    }
    for (int i = 1; i <= n; ++i) if (!used[i]) {
        k = 0;
        dfs(i);
        kol.push_back(k);
    }
    long al = bpow(n, m);
    long bad = 0;
    for (int i = 0; i < kol.size(); ++i) {
        bad += bpow(kol[i], m);
    }
  cout << al - bad;
}
