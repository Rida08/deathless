#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;
using ll = long long;

const int N = 100;
const int dc[] = { 0, 0, 1, -1 };
const int dr[] = { 1, -1, 0, 0 };

int n, m, x, ch = 0, col[N];

vector<int>g[N];

void dfs(int u) {
    int c = 1;
    for (int v : g[u]) {
        if (col[v] == -1) {
            col[v] == 0;
            queue<int>q;
            q.push(v);
            while (q.size() > 0) {
                int u1 = q.front();
                q.pop();
                if (col[u1] == -1) {
                    col[u1] = 1 - col[v];
                    q.push(u1);
                }
                if (col[u1] == col[v]) c = 0;
            }
        }
    }
    if (c == 1) ch = 1;
}

int main() {
    memset(col, -1, sizeof col);
    cin >> n >>m;
    for (int i = 0; i < m; ++i) for (int j = 0; j < 2; ++j) {
        cin >> x;
        g[i].push_back(x);
    }
    for (int i = 0; i < n; ++i) dfs(i);

    if (ch == 1) cout << "YES";
    else cout << "NO";
}
