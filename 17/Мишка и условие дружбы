#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;
using ll = long long;

const int N=1e7;
int n, m, used[N], us[N], k, ch=1;

vector<int>g[N], kol;

void dfs1(int v) {
    used[v] = 1;
    k++;
    for (int u : g[v]) {
        if (!used[u]) {
            dfs1(u);
        }
    }
}
void dfs2(int v, int i) {
    us[v] = 1;
    if (g[v].size() != kol[i] - 1) ch = 0;
    for (int u : g[v]) {
        if (!us[u]) {
            dfs2(u, i);
        }
    }
}
int main() {
    cin >> n>>m;
    for (int i = 0; i < m; ++i) {
        int x, y;
        cin >> x >> y;
        g[x].push_back(y), g[y].push_back(x);
    }
    for (int i = 0; i < n; ++i) if (!used[i]) {
        k = 0;
        dfs1(i);
        kol.push_back(k);
    }
    int j = 0;
    for (int i = 0; i < n; ++i) if (!us[i]) {
        dfs2(i, j);
        j++;    
    }
    if (ch) cout << "YES";
    else cout << "NO";
}
